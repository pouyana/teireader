(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> no such table: files"
p3
sS'layer'
p4
S'/home/poa32kc/Tei/teireader/webui/applications/grid/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nfrom drama import Drama\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return "HELLO WORLD"\n    #return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\ndef analyse():\n    files = db.files\n    session_name = files.session_name\n    q= session_name==session.session_id\n    s = db(q)\n    rows = s.select()\n    groups={}\n    #group managment\n    for r in rows:\n        if r.groupname not in groups:\n            groups[r.groupname]=[]\n            tmpfile = {}\n            tmpfile["filename"] = r.filename\n            tmpfile["address"] = request.folder+"uploads/"+r.doc\n            tmpfile2 = {}\n            tmpfile2["name"] = "whole"\n            tmpfile2["address"] = "no-address"\n            tmpfile2["stats"] = {"group":"0"}\n            groups[r.groupname].append(tmpfile)\n            groups[r.groupname].append(tmpfile2)\n        else:\n            tmpfile = {}\n            tmpfile["filename"] = r.filename\n            tmpfile["address"] = r.doc\n            groups[r.groupname].append(tmpfile)\n    #for every group we go through the files\n    values = groups.viewvalues()\n    for g in values:\n        for text in g:\n            if (text["address"] != "no-address"):\n                drama = Drama(text["address"])\n                text["bible_name"] = drama.get_bibl_title()\n                text["name"] = drama.get_title()\n                text["whole_stats"] = drama.get_stats()\n                text["stats"] = text["whole_stats"]["major"]\n                text["median"] = text["whole_stats"]["median_count"]\n                text["average"] = text["whole_stats"]["average_count"]\n\n    return dict(session_id=session.session_id,answer=groups)\n\ndef upload_file():\n    try:\n        f = request.vars[\'files[]\']\n        id = db.files.insert(doc = db.files.doc.store(f.file, f.filename))\n        record = db.files[id]\n        path_list = []\n        path_list.append(request.folder)\n        path_list.append(\'uploads\')\n        path_list.append(record[\'doc\'])\n        File = db(db.files.id==id).select()[0]\n        namearray = f.filename.split(".")\n        tmpfilename = namearray[1]+".xml"\n        tmpgorupname = namearray[0]\n        sessionname = session.session_id\n        db.files[id] = dict(filename=tmpfilename)\n        db.files[id] = dict(groupname=tmpgorupname)\n        db.files[id] = dict(session_name=sessionname)\n        res = dict(files=[{"name": str(f.filename), "url": URL(f=\'download\', args=[File[\'doc\']]), "delete_url": URL(f=\'delete_file\', args=[File[\'doc\']]), "delete_type": "DELETE" }])\n        return res\n    except:\n        return dict(message=T(\'Upload error\'))\n\ndef delete_file():\n        """\n        Delete an uploaded file\n        """\n        try:\n            name = request.args[0]\n            db(db.files.doc==name).delete()\n            return dict(message=T(\'File deleted\'))\n        except:\n            return dict(message=T(\'Deletion error\'))\n\n\ndef upload():\n        session.session_id = response.session_id\n        return dict(session_id=session.session_id)\nresponse._vars=response._caller(analyse)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/poa32kc/Tei/teireader/webui/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/poa32kc/Tei/teireader/webui/applications/grid/controllers/default.py", line 156, in <module>\n  File "/home/poa32kc/Tei/teireader/webui/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/poa32kc/Tei/teireader/webui/applications/grid/controllers/default.py", line 84, in analyse\n    rows = s.select()\n  File "/home/poa32kc/Tei/teireader/webui/gluon/dal.py", line 10335, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/home/poa32kc/Tei/teireader/webui/gluon/dal.py", line 2388, in select\n    return super(SQLiteAdapter, self).select(query, fields, attributes)\n  File "/home/poa32kc/Tei/teireader/webui/gluon/dal.py", line 1831, in select\n    return self._select_aux(sql,fields,attributes)\n  File "/home/poa32kc/Tei/teireader/webui/gluon/dal.py", line 1796, in _select_aux\n    self.execute(sql)\n  File "/home/poa32kc/Tei/teireader/webui/gluon/dal.py", line 1916, in execute\n    return self.log_execute(*a, **b)\n  File "/home/poa32kc/Tei/teireader/webui/gluon/dal.py", line 1910, in log_execute\n    ret = self.cursor.execute(command, *a[1:], **b)\nOperationalError: no such table: files\n'
p11
s.