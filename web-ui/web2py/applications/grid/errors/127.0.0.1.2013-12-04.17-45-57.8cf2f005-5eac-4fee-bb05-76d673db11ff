(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> cannot concatenate 'str' and 'Row' objects"
p3
sS'layer'
p4
S'/home/poa32kc/Tei/teireader/web-ui/web2py/applications/grid/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    response.flash = T("Welcome to web2py!")\n    return "HELLO WORLD"\n    #return dict(message=T(\'Hello World\'))\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\ndef upload_file():\n        """\n        File upload handler for the ajax form of the plugin jquery-file-upload\n        Return the response in JSON required by the plugin\n        """\n        try:\n            # Get the file from the form\n            f = request.vars[\'files[]\']\n            \n            # Store file\n            id = db.files.insert(doc = db.files.doc.store(f.file, f.filename))\n            \n            # Compute size of the file and update the record\n            record = db.files[id]\n            path_list = []\n            path_list.append(request.folder)\n            path_list.append(\'uploads\')\n            path_list.append(record[\'doc\'])\n            #size =  shutil.os.path.getsize(shutil.os.path.join(*path_list))\n            File = db(db.files.id==id).select()[0]\n            #db.files[id] = dict(sizeFile=size)\n            db.files[id] = dict(sessionId=response.session_id)\n            \n            res = dict(files=[{"name": str(f.filename), "url": URL(f=\'download\', args=[File[\'doc\']]), "delete_url": URL(f=\'delete_file\', args=[File[\'doc\']]), "delete_type": "DELETE" }])\n            return gluon.contrib.simplejson.dumps(res, separators=(\',\',\':\'))\n\n        except:\n            return \'Upload error\'+ record\n\n\ndef delete_file():\n        """\n        Delete an uploaded file\n        """\n        try:\n            name = request.args[0]\n            db(db.files.doc==name).delete()\n            return dict(message=T(\'File deleted\'))\n        except:\n            return dict(message=T(\'Deletion error\'))\n\n\ndef upload():\n        return dict()\n\nresponse._vars=response._caller(upload_file)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/poa32kc/Tei/teireader/web-ui/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/poa32kc/Tei/teireader/web-ui/web2py/applications/grid/controllers/default.py", line 124, in <module>\n  File "/home/poa32kc/Tei/teireader/web-ui/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/poa32kc/Tei/teireader/web-ui/web2py/applications/grid/controllers/default.py", line 106, in upload_file\n    return \'Upload error\'+ record\nTypeError: cannot concatenate \'str\' and \'Row\' objects\n'
p11
s.